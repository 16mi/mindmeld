Different Approaches for Building Conversational Applications
=============================================================

Developers and researchers have been building conversational applications, such as chatbots, for decades. Over the years, many different strategies have been considered. With the recent proliferation and widespread adoption of voice and chat assistants, standard approaches are finally emerging to help define the best practices for building useful, production-quality chatbots. This section outlines a few of the most common approaches for building conversational applications today and describes some of the pros and cons associated with each.

Rule-Based Approaches
---------------------
Prior to the machine learning advances of the past decade, rule-based approaches were the most common strategy employed to build conversational applications. For developers unfamiliar with machine learning, rule-based logic is usually where most implementations begin. Today, there are several rule-based software frameworks, such as `BotKit <https://github.com/howdyai/botkit>`_ or `Microsoft Bot Framework <https://dev.botframework.com/>`_ which can assist developers in getting a simple conversational service up and running. The purpose of these frameworks is to provide the scaffolding to host message-handling logic and the plumbing to integrate with various bot client endpoints. These frameworks can simplify the task of setting up a server process which can listen for incoming text messages, and they can streamline the effort required to integrate with popular clients like Slack or Facebook Messenger.

With rule-based frameworks, the developer is responsible for implementing the core logic to interpret incoming messages and return helpful responses. This logic generally consists of a series of rules that specify which scripted response to return for a message that matches a specified pattern. Since rule-based frameworks are not intended to provide AI capabilities to parse or classify incoming messages, the developer must code all of the necessary message processing and interaction logic by hand. It is not uncommon for even simple applications to require hundreds of rules to handle the different dialogue states in a typical conversational interface.

Rule-based approaches are often the quickest way to build and launch a basic demo of a voice or chat assistant. Moving from demo to production, however, almost always exposes a multitude of corner cases, each of which must be handled with different rules. Conflicts and redundancies between rules further complicate this undertaking. Even for simple applications, the growing list of rules can quickly become prohibitively complex. Seasoned developers, familiar with the pitfalls of rule-based approaches, typically opt for one of the more sophisticated approaches discussed below.

Cloud-Based NLP Services
------------------------
In the past few years, a variety of cloud-based NLP, or Natural Language Processing, services have emerged that aspire to reduce the complexity associated with building basic language understanding capabilities. These services are intended to enable developers without machine learning or NLP expertise to create useful NLP capabilities. All of these services provide browser-based consoles which assist developers in uploading and annotating training examples. They also streamline the task of launching a cloud-based web service to handle and parse natural language requests. These services are generally provided by large consumer internet companies to entice developers to upload their training data and thereby help the service provider improve their own conversational AI offerings in the process. Some of the NLP services currently available include `Amazon Lex <https://aws.amazon.com/lex/>`_, `Google's api.ai <https://api.ai/>`_, `Facebook's wit.ai <https://wit.ai/>`_, `Microsoft LUIS <https://www.luis.ai/>`_,  `Samsung's Viv <http://viv.ai/>`_, `IBM Watson Conversation <http://www.ibm.com/watson/developercloud/conversation.html>`_, among others.

Cloud-based NLP services offer a relatively straighforward path for developers to build conversational applications without requiring machine learning knowledge. As a result, they can be the fastest path for assembling a demo or prototype. Many of these services offer pre-trained models for popular consumer tasks like checking the weather, setting an alarm or timer, updating a to-do list or sending a text message. Consequently, these NLP services are well-suited for applications which simply need to replicate common consumer domains without customization. Since the pre-trained models generally offered by these services duplicate the freely available functionality in today's widely used consumer virtual assistants, companies interested in leveraging these pre-trained models to monetize their own business will likely face an uphill battle.

For companies that need to build an application which goes beyond a simple demo and requires models other than the generic, pre-trained consumer domains, cloud-based NLP services are typically not the best approach. Building language understanding models tailored to a particular application or domain requires training the models on thousands or millions of representative training examples. Cloud-based NLP services, since they are targeted at developers who are unlikely to have large amounts of training data, are generally intended for smaller data sets and simpler custom models. In addition, most cloud-based NLP services only provide basic support for NLP tasks such as intent classification and entity recognition. Implementing the other required processing steps in a typical conversational workflow, such as entity resolution, language parsing, question answering, and knowledge base creation, is left up to the developer. Perhaps most importantly, for companies that are unable or unwilling to forego legal ownership of user data when it is uploaded to the service provider cloud, these NLP services are generally not a viable option. 

Machine Learning Toolkits
-------------------------
Machine learning researchers working on NLP and conversational applications typically rely on versatile and advanced machine learning tookits. These toolkits provide low-level access to state-of-the-art algorithms including Deep Learning techniques like LSTMs, RNNs, CNNs and more. Some of the more popular machine learning toolkits in use today include `Google's TensorFlow <https://www.tensorflow.org/>`_, `Microsoft Cognitive Toolkit <https://www.microsoft.com/en-us/research/product/cognitive-toolkit/>`_, and `Apple's GraphLab Create <https://turi.com/>`_, among others.

For machine learning researchers, toolkits like these are indispensable, and they serve as the foundation for much of the cutting-edge AI research performed today. For companies looking to deploy production conversational services, however, these toolkits often provide little help. While machine learning toolkits provide access to the most advanced machine learning algorithms, they provide little or no representative training data that is likely useful for a given production application. As a result, developers must do all the heavy lifting associated with creating and managing training data themselves. Furthermore, while machine learning toolkits provide deep access to low-level machine learning algorithms, they do not offer any of the higher level abstractions which can greatly streamline the task of constructing a conversational interface. As a result, even the most skilled machine learning engineers will rarely succeed in building production-quality conversational applications using today's machine learning toolkits.

Conversational AI Platforms
---------------------------
With the rise of converational applications in the past few years, a new technology approach has emerged to assist companies and developers create production-quality conversational experiences. Today called Conversational AI Platforms, these solutions are machine learning platforms which have been optimized for the task of creating conversational applications such as voice or chat assistants. The platforms offer companies the flexibility and advanced capabilities of traditional machine learning toolkits but are specifically adapted to streamline the task of building  production conversational interfaces. `MindMeld Workbench <https://www.mindmeld.com/>`_ is an example of one of the most widely used Conversational AI platforms available today.

Conversational AI platforms differ from pure machine learning platforms in that they offer tools specifically designed for the machine learning steps in a typical conversational workflow. For example, tools for intent classification, entity recognition, entity resolution, question answering, dialogue management are common components in Conversational AI platforms. Conversational AI platforms differ from cloud-based NLP services in that they are intended to be used by machine learning engineers with some familiarity of data science best practices. As a result, Conversational AI platforms offer more advanced tools and more flexibility to train and analyze custom language understanding models around large sets of training data. Unlike cloud-based NLP services, Conversational AI platforms do not require that training data be uploaded to a shared clould infrastructure. Instead, they provide a flexible and versatile platform which ensures that data sets and trained models are locally managed and always remain the intellectual property of the application developer.

How Good is Good Enough?
------------------------
With so many different approaches for building conversational applications, it is often difficult for companies to know which strategy is best. The best strategy should be the one that achieves the minimum threshold of performance which ensures a positive user experience. For conversational applications, determining this minimum level of acceptability can often be a confusing or daunting undertaking.

Conversational interfaces represent a new user interface paradigm that is unfamiliar and nonintuitive for many developers who have experience building web or native applications. Unlike traditional graphical user interfaces (GUIs), conversational interfaces can be much more unforgiving. In a traditional GUI, the visual elements on the display provide a very useful mechanism to guide a user down an interaction path that will lead to a positive experience. For conversational interfaces, no such visual guide exists. Instead, the user is typically presented with a microphone button or a text prompt, and they are expected to figure out how to verbalize their desired request from scratch. When faced with such an open-ended prompt and little context, many users find themselves at a loss for words. Even worse, they might pose a question that the system is not designed to handle, leading to a fruitless and frustrating outcome.

Developers who are building a conversational interface for the first time often attempt to follow the same practices utilized for traditional GUIs. Namely, a developer builds a minimum viable product, or MVP, which captures a small subset of the envisioned functionality, and then submits the MVP for user testing. For conversational interfaces, this approach almost inevitably fails. An minimal implementation of a conversational interface typically means that it will be built using a small subset of the training data that will eventually be needed in a production application. For example, consider an MVP built using 10% of the training data eventually required. This application will only be able to understand around ten percent of the typical language variations verbalized by users when they invoke your app. As a result, when you submit your app for user testing, nine out of ten users will fail on their first request. This abysmal performance might quickly toll the death knell for your project.

As it turns out, quick-and-dirty prototypes and limited-scale user testing are not particularly useful in assessing the utility of conversational applications. The only way that performance can be measured accurately is by enlisting large-scale analytics to deterministically measure performance across the long tail of possible user interactions. Popular commercial virtual assistants like Siri, Cortana, Google Assistant and Alexa all rely on this same measurment methodology to ensure that their services meet a mimimum threshold of acceptability before they launch any new features publicly. This measurement methodology first relies on having a large enough set of 'ground truth' data to be sure that it reflects the lion's share of all possible user interaction patterns. Next this 'ground truth' data is used, via automated testing, to ensure that a large enough percentage of user queries return an acceptable response.

Users are unforgiving when evaluating a conversational interface. They expect to be able to verbalize their request the same way they would if speaking with another person. They also expect that the system will respond with human-like accuracy. This typically means that conversational applications must be near-perfect. In practice, this means that conversational interfaces must have an accuracy of at least 95%. Anything less, and users will likely conclude your app is  dimwitted and never use it again.

Given these unique characteristics of conversational applications, it is important to remember the following guidelines to ensure your conversational interface can meet a minimum threshold of acceptability before going live.

=== ===
1   Select a use case that mimics a familiar, real-world interaction so that users will have intuition about the types of questions they might ask. Selecting an unrealistic or incorrect use case will render even the smartest app dead on arrival.
2   Ensure that you have a large enough set of 'ground truth' training data to ensure that the vast majority of user interactions can be captured and measured. Dipping your toe in the water does not work. Real-world accuracy can only be evaluated after you take the plunge.
3   Employ large-scale analytics to ensure that your application achieves at least 95% accuracy across the long tail of possible user interactions. Spot checking and small-scale user testing will be unable to expose long-tail corner cases which might fatally undermine overall accuracy.
=== ===

